<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小贤的博客</title>
  <icon>https://www.gravatar.com/avatar/79d4fb98efbce9f28373e40992be507f</icon>
  <subtitle>生活。技术。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://bobsam.github.io/"/>
  <updated>2018-03-25T17:54:12.000Z</updated>
  <id>https://bobsam.github.io/</id>
  
  <author>
    <name>Bob Yu</name>
    <email>gzyuboxian@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Webpack vs Rollup</title>
    <link href="https://bobsam.github.io/2018/webpack-vs-rollup.html"/>
    <id>https://bobsam.github.io/2018/webpack-vs-rollup.html</id>
    <published>2018-03-24T16:55:11.000Z</published>
    <updated>2018-03-25T17:54:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>4月份的时候，Facebook将React的构建工具换成了Rollup。很多人就有疑问了，Webpack不也是Facebook团队开发的吗，为什么不使用它而是要换成第三方构建工具呢？先别急，等你看完这篇文章，你就知道为什么了。</p></blockquote><h2 id="一、Webpack"><a href="#一、Webpack" class="headerlink" title="一、Webpack"></a>一、Webpack</h2><p>诞生于2012年，目前Javascript社区使用得比较多的构建工具。它的出现，解决了当时的构建工具不能处理的问题——构建复杂的单页面应用(SPA)。它是一个强力的模块打包器。 所谓包(bundle)就是一个 JavaScript 文件，它把一堆资源(assets)合并在一起，以便它们可以在同一个文件请求中发回给客户端。 包中可以包含 JavaScript、CSS 样式、HTML 以及很多其它类型的文件。</p><p><img src="http://nos.netease.com/knowledge/1ab180ac-4581-4ea8-8f8d-86a844b4e0a3?imageView&amp;thumbnail=980x0" alt="Alt pic"></p><h3 id="Webpack的特点"><a href="#Webpack的特点" class="headerlink" title="Webpack的特点"></a>Webpack的特点</h3><h4 id="代码分割"><a href="#代码分割" class="headerlink" title="代码分割"></a>代码分割</h4><p>Webpack 有两种组织模块依赖的方式，同步和异步。异步依赖作为分割点，形成一个新的块。在优化了依赖树后，每一个异步区块都作为一个文件被打包。</p><h4 id="Loader-加载器"><a href="#Loader-加载器" class="headerlink" title="Loader(加载器)"></a>Loader(加载器)</h4><p>Webpack 本身只能处理原生的 JavaScript 模块，但是 loader 转换器可以将各种类型的资源转换成 JavaScript 模块。这样，任何资源都可以成为 Webpack 可以处理的模块。</p><h4 id="智能解析"><a href="#智能解析" class="headerlink" title="智能解析"></a>智能解析</h4><p>Webpack 有一个智能解析器，几乎可以处理任何第三方库，无论它们的模块形式是 CommonJS、 AMD 还是普通的 JS 文件。甚至在加载依赖的时候，允许使用动态表达式 require(“./templates/“ + name + “.jade”)。</p><h4 id="插件系统"><a href="#插件系统" class="headerlink" title="插件系统"></a>插件系统</h4><p>Webpack 还有一个功能丰富的插件系统。大多数内容功能都是基于这个插件系统运行的，还可以开发和使用开源的 Webpack 插件，来满足各式各样的需求。</p><h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><blockquote><p>目前webpack最新版本是3.0.0</p></blockquote><pre><code>npm i webpack -g  npm i webpack@version -g</code></pre><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>在项目添加webpack.config.js  </p><pre><code>const path = require(&apos;path&apos;);const webpack = require(&apos;webpack&apos;);module.exports = {      entry: &apos;./src/main.js&apos;,      output: {        path: path.resolve(__dirname, &apos;./dist&apos;),        publicPath: &apos;/dist/&apos;,        filename: &apos;build.js&apos;      },      module: {        rules: [          {            test: /\.vue$/,            loader: &apos;vue-loader&apos;,            options: {                  loaders: {}                  // other vue-loader options go here            }          },          {            test: /\.js$/,            loader: &apos;babel-loader&apos;,            exclude: /node_modules/          },          {            test: /\.(png|jpg|gif|svg)$/,            loader: &apos;file-loader&apos;,            options: {              name: &apos;[name].[ext]?[hash]&apos;            }          }        ]      },      resolve: {        alias: {              &apos;vue$&apos;: &apos;vue/dist/vue.common.js&apos;        }      },      devServer: {        historyApiFallback: true,        noInfo: true      },      performance: {        hints: false      },      devtool: &apos;#eval-source-map&apos;}if (process.env.NODE_ENV === &apos;production&apos;) {    module.exports.devtool = &apos;#source-map&apos;;    module.exports.plugins = (module.exports.plugins || []).concat([        new webpack.DefinePlugin({            &apos;process.env&apos;: {                NODE_ENV: &apos;&quot;production&quot;&apos;            }        }),        new webpack.optimize.UglifyJsPlugin({            sourceMap: true,            compress: {                warnings: false            }        }),        new webpack.LoaderOptionsPlugin({            minimize: true        })    ]);}</code></pre><p>打开命令控制台，执行：  </p><pre><code>webpack# or webpack --config webpack.config.js</code></pre><p>此时你应该可以在项目目录的dist文件夹里找到打包好的文件了。</p><blockquote><p>其他使用方式可参照官方文档:<br>英文：<a href="https://webpack.js.org/configuration/" target="_blank" rel="noopener">https://webpack.js.org/configuration/</a><br>中文：<a href="https://doc.webpack-china.org/configuration/" target="_blank" rel="noopener">https://doc.webpack-china.org/configuration/</a>  </p></blockquote><h2 id="二、Rollup"><a href="#二、Rollup" class="headerlink" title="二、Rollup"></a>二、Rollup</h2><p>Rollup是下一代JavaScript模块打包工具。开发者可以在你的应用或库中使用ES2015模块，然后高效地将它们打包成一个单一文件用于浏览器和Node.js使用。<br>Rollup最令人激动的地方，就是能让打包文件体积很小。这么说很难理解，更详细的解释：相比其他JavaScript打包工具，Rollup总能打出更小，更快的包。因为Rollup基于ES2015模块，比Webpack和Browserify使用的CommonJS模块机制更高效。这也让Rollup从模块中删除无用的代码，即<strong><code>tree-shaking</code></strong>变得更容易。</p><h3 id="Rollup的特点"><a href="#Rollup的特点" class="headerlink" title="Rollup的特点"></a>Rollup的特点</h3><h4 id="Tree-shaking"><a href="#Tree-shaking" class="headerlink" title="Tree-shaking"></a>Tree-shaking</h4><p>这个特点，是Rollup最初推出时的一大特点。Rollup通过对代码的静态分析，分析出冗余代码，在最终的打包文件中将这些冗余代码删除掉，进一步缩小代码体积。这是目前大部分构建工具所不具备的特点(Webpack 2.0+已经支持了，但是我本人觉得没有Rollup做得干净)。</p><h4 id="ES2015模块打包支持"><a href="#ES2015模块打包支持" class="headerlink" title="ES2015模块打包支持"></a>ES2015模块打包支持</h4><p>这个也是其他构建工具所不具备的。Rollup直接不需要通过babel将import转化成Commonjs的require方式，极大地利用ES2015模块的优势。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>先在全局安装好rollup  </p><pre><code>npm i rollup -g  </code></pre><p>然后我们再创建一个简单的项目：</p><pre><code>mkdir -p my-rollup-project/srccd my-rollup-project</code></pre><p>编写好入口文件：</p><pre><code>// src/main.jsimport foo from &apos;./foo.js&apos;;export default function () {      console.log(foo);}</code></pre><p>然后，创建一个名为<code>foo.js</code>的文件</p><pre><code>// src/foo.jsexport default &apos;hello world!&apos;;</code></pre><p>最后，打开命令行，执行下面的命令吧：</p><pre><code>rollup src/main.js --format cjs</code></pre><p>打包结果：</p><pre><code>&apos;use strict&apos;;var foo = &apos;hello world!&apos;;var main = function () {      console.log(foo);};module.exports = main;</code></pre><p>你也可以打包出一个名为<code>bundle.js</code>的文件：</p><pre><code>rollup src/main.js --format cjs --output bundle.js# or `rollup main.js -f cjs -o bundle.js`</code></pre><blockquote><p>其他使用方式可查看官网文档：<br><a href="https://rollupjs.org" target="_blank" rel="noopener">https://rollupjs.org</a></p></blockquote><h2 id="三、Webpack与Rollup的对比"><a href="#三、Webpack与Rollup的对比" class="headerlink" title="三、Webpack与Rollup的对比"></a>三、Webpack与Rollup的对比</h2><p>其实，通过分别对Webpack和Rollup的介绍，不难看出，Webpack和Rollup在不同场景下，都能发挥自身优势作用。Webpack对于代码分割和静态资源导入有着“先天优势”，并且支持热模块替换(HMR)，而Rollup并不支持，所以当项目需要用到以上，则可以考虑选择Webpack。但是，Rollup对于代码的Tree-shaking和ES6模块有着算法优势上的支持，若你项目只需要打包出一个简单的bundle包，并是基于ES6模块开发的，可以考虑使用Rollup。<br>其实Webpack从2.0开始支持Tree-shaking，并在使用babel-loader的情况下支持了es6 module的打包了，实际上，Rollup已经在渐渐地失去了当初的优势了。但是它并没有被抛弃，反而因其简单的API、使用方式被许多库开发者青睐，如React、Vue等，都是使用Rollup作为构建工具的。而Webpack目前在中大型项目中使用得非常广泛。<br>最后，用一句话概括就是：<strong><code>在开发应用时使用 Webpack，开发库时使用 Rollup</code></strong>。</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>Webpack和Rollup作为构建工具，都有着各自的优势和各自的使用场景，我们不能因为他们的一些缺点而弃之，相反，我们在开发过程中，若是能利用好它们的优点，并能对我们的生产效率有着极大的提高作用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;4月份的时候，Facebook将React的构建工具换成了Rollup。很多人就有疑问了，Webpack不也是Facebook团队开发的吗，为什么不使用它而是要换成第三方构建工具呢？先别急，等你看完这篇文章，你就知道为什么了。&lt;/p&gt;
&lt;/bloc
      
    
    </summary>
    
      <category term="技术" scheme="https://bobsam.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Javascript" scheme="https://bobsam.github.io/tags/Javascript/"/>
    
      <category term="Webpack" scheme="https://bobsam.github.io/tags/Webpack/"/>
    
      <category term="Rollup" scheme="https://bobsam.github.io/tags/Rollup/"/>
    
  </entry>
  
</feed>
